{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortId","generate","deleteContact","changeFilter","ContactForm","state","handeChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","type","onChange","pattern","title","required","Component","connect","dispatch","contactActions","ContactItem","onDelete","onClick","getVisibleContacts","allItems","filter","normalizedFilter","toLowerCase","contact","includes","contacts","items","contactId","map","target","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","contactsReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b2ab0a17.chunk.js","sourcesContent":["import shortId from 'shortid';\r\n// import types from './contacts-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortId.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n//Without @reduxjs/toolkit\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: shortId.generate(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contacts/contacts-actions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handeChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state); // App formSubmitHandler\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label className=\"label\">\r\n          Name\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handeChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"label\">\r\n          Phone\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            value={this.state.number}\r\n            onChange={this.handeChange}\r\n            name=\"number\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className=\"button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: ({ name, number }) =>\r\n    dispatch(contactActions.addContact({ name, number })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ id, name, number, onDelete }) => (\r\n  <li className=\"contact-list-item\">\r\n    <p className=\"name bold\">{name}</p>\r\n    <p>{number}</p>\r\n    <button className=\"button\" onClick={() => onDelete(id)}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactItem from '../ContactItem/ContactItem';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst ContactList = ({ contacts, onDelete }) => (\r\n  <ul className=\"contact-list\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <ContactItem\r\n        key={id}\r\n        id={id}\r\n        name={name}\r\n        number={number}\r\n        onDelete={onDelete}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (allItems, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allItems.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({contacts: {items, filter}}) => ({\r\n contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: contactId => dispatch(contactActions.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"label\">\r\n    Find contacts by name\r\n    <input\r\n      className=\"input\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n    ></input>\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// Components\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/Filter/Filter';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"phonebook\">\r\n      <h1 className=\"phonebook_title\">Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className=\"phonebook_title\">Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions'\r\n\r\nconst initialItems = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\n//Without @reduxjs/toolkit\r\n\r\n// const items = (state = initialItems, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst items = createReducer(initialItems, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","// import { combineReducers } from 'redux'; //createStore\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n//Without @reduxjs/toolkit\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// console.log(process.env.NODE_ENV);\r\n// console.log(getDefaultMiddleware());\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import 'modern-normalize/modern-normalize.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles/style.scss';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}